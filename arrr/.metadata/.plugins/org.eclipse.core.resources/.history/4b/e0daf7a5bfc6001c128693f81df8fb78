package caseStudy.UserMicroservice.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import caseStudy.UserMicroservice.dao.AdminRepository;
import caseStudy.UserMicroservice.dao.FareRepository;
import caseStudy.UserMicroservice.entity.AdminDetails;
import caseStudy.UserMicroservice.entity.TrainDetails;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private FareRepository FareRepository;

	@Autowired
	private AdminRepository AdminRepository;

	// This method finds the all Trains
	public List<TrainDetails> getAllDetails() {
		List<TrainDetails> FlightDetails = new ArrayList<TrainDetails>();
		FareRepository.findAll().forEach(FlightDetails1 -> FlightDetails.add(FlightDetails1));
		return FlightDetails;
	}

	// This method add the new train
	public void addFlightDetails(TrainDetails flightDetails) {
		FareRepository.save(flightDetails);
	}

	// This method update the details of previous Train
	public TrainDetails updateTrainDetails(int trainNo, TrainDetails trainDetails) {
		TrainDetails existingDetails = FareRepository.findByTrainNo(trainNo);
		existingDetails.setTrainNo(TrainDetails.getTrainDate());
		existingDetails.setStartPoint(TrainDetails.getStartPoint());
		existingDetails.setEndPoint(TrainDetails.getEndPoint());
		existingDetails.setArrivalTime(TrainDetails.getArrivalTime());
		existingDetails.setDeptTime(TrainDetails.getDeptTime());
		existingDetails.setDuration(TrainDetails.getDuration());
		existingDetails.setNoOfSeats(TrainDetails.getNoOfSeats());
		existingDetails.setFirstClass(TrainDetails.getFirstClass());
		existingDetails.setSecondClass(TrainDetails.getSecondClass());
		existingDetails.setSleeperClass(TrainDetails.getSleeperClass());
		return FareRepository.save(existingDetails);
	}

	// This method delete the Flight by trainNo
	@Override
	public ResponseEntity<TrainDetails> deletTrainDetails(int trainNo) {
		TrainDetails existingDetails = FareRepository.findByTrainNo(trainNo);
		FareRepository.delete(existingDetails);
		// fareRepo.deleteById(trainNo);
		return ResponseEntity.ok().build();
	}

	// This method finds the Flight by train no
	@Override
	public TrainDetails findByTrainNo(int trainNo) {
		return FareRepository.findByTrainNo(trainNo);
	}

	// This method find the flights by startpoint, endpoint and trainDate
	@Override
	public TrainDetails[] findByStartPointAndEndPointAndTrainDate(String startPoint, String endPoint,
			String trainDate) {
		return FareRepository.findByStartPointAndEndPointAndTrainDate(startPoint, endPoint, trainDate);

	}
	
	// This method add the admin details
	public void addAdmin(AdminDetails adminDetails) {
		AdminRepository.save(adminDetails);
	}
}